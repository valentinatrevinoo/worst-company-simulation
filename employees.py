"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <Valentina Trevino> and <Adrian Estrada>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: vt6738
UT EID 2: ae28294
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """

    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        self.salary = salary

    @property
    def name(self):
        """Returns name of employee (read only)."""
        return self.__name #read only

    @property
    def manager(self):
        """Returns manager (read only)."""
        return self.__manager #read only

    @property
    def performance(self):
        """Returns employee performance score."""
        return self.__performance #int

    @performance.setter
    def performance(self, value):
        """Performance score between 0-100."""
        self.__performance = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))

    @property
    def happiness(self):
        """Returns employee happiness level."""
        return self.__happiness #int

    @happiness.setter
    def happiness(self, value):
        """Happiness level between 0-100."""
        self.__happiness = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))

    @property
    def salary(self):
        """Return employee salary."""
        return self.__salary #int

    @salary.setter
    def salary(self, value):
        """Raise error, salary cannot be negative."""
        if value < 0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        self.__salary = value

    @abstractmethod
    def work(self): #subclass
        """Abstract method,  one hour of work"""

    def interact(self, other):
        """Simulate an interaction between two employees."""
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1

    def daily_expense(self):
        """Simulates daily expenses."""
        self.savings -= DAILY_EXPENSE
        self.happiness -= 1

    def __str__(self): #return sring
        return f"{self.name}\n\tSalary: ${self.salary}\n\tSavings: ${self.savings}\n\tHappiness: {self.happiness}%\n\tPerformance: {self.performance}%"


class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self): #manager 1 hour
        performance_change = random.randint(-5, 5)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 1
            for employee in self.relationships:
                self.relationships[employee] -= 1
        else:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self): # employee 1hour
        performance_change = random.randint(-15, 15)
        self.performance += performance_change
        if performance_change <= 0:
            self.happiness -= 2
        else:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if other.happiness > HAPPINESS_THRESHOLD and self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary //= 2
                self.happiness -= 5
                if self.salary == 0:
                    self.is_employed = False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self): #1hour permanent employee
        performance_change = random.randint(-10, 10)
        self.performance += performance_change
        if performance_change >= 0:
            self.happiness += 1

    def interact(self, other):
        super().interact(other)
        if other == self.manager:
            if other.happiness > HAPPINESS_THRESHOLD and self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
